{
    "window.zoomLevel": 1,

    "files.insertFinalNewline": true,

    "editor.wordWrap": "off",
    "editor.lineNumbers": "relative",
    "editor.tabCompletion": "off",
    "editor.cursorBlinking": "smooth",
    "editor.smoothScrolling": true,
    "editor.minimap.enabled": false,
    "editor.cursorSmoothCaretAnimation": "on",

    "workbench.colorTheme": "Visual Studio Dark - C++",
    "workbench.activityBar.location": "top",
    "workbench.view.alwaysShowHeaderActions": true,

    "vim.easymotion": true,
    "vim.highlightedyank.enable": true,
    "vim.smartRelativeLine": true,
    "vim.sneak": true,
    "vim.sneakReplacesF": true,
    "vim.startofline": false,
    "vim.visualstar": true,
    "vim.camelCaseMotion.enable": true,
    "vim.sneakUseIgnorecaseAndSmartcase": true,
    "vim.leader": "<space>",
    "vim.handleKeys": {
        "<C-s>": false,
        "<C-z>": false,
        "<C-y>": false,
        "<C-/>": false
    },
    "vim.visualModeKeyBindings": [

        // Bind <leader>d to delete current visual selection without yanking it
        {
            "before"    : ["<leader>", "d"],
            "after"     : ["\"", "_", "d"]
        },

        // <leader>c - Same as <leader>d but enters insert mode right after
        {
            "before"    : ["<leader>", "c"],
            "after"     : ["\"", "_", "c"]
        },

        // Bind <leader>p to delete current visual selection without yanking it and paste what is currently in the yank register
        {
            "before"    : ["<leader>", "p"],
            "after"     : ["<leader>", "d", "P"]
        },

        // Bind <leader>P to do the same as <leader>p but with a small p paste at the end instead of capital P paste
        {
            "before"    : ["<leader>", "P"],
            "after"     : ["<leader>", "d", "p"]
        },

        // <leader>f - flip/reverse selected lines
        {
            "before"    : ["<leader>", "f"],
            "commands"     : ["flip.selection",]
        }

    ],
    "vim.normalModeKeyBindings": [

        // Keep centered when scrolling up/down witn Ctrl-D/Ctrl-U
        {
            "before"    : ["C-d"],
            "after"     : ["C-d", "z", "z"],
        },

        {
            "before"    : ["C-u"],
            "after"     : ["C-u", "z", "z"],
        },

        {
            "before"    : ["{"],
            "after"     : ["{", "z", "z"]
        },

        {
            "before"    : ["}"],
            "after"     : ["}", "z", "z"]
        },

        // Keep centered when searching with n/N
        {
            "before"    : ["n"],
            "after"     : ["n", "z", "z"],
        },

        {
            "before"    : ["N"],
            "after"     : ["N", "z", "z"],
        },

        // <leader>] - go to next problem in file
        {
            "before": ["<leader>", "]"],
            "commands": ["editor.action.marker.next",],
        },

        // <leader>[ - go to previous problem in file
        {
            "before": ["<leader>", "["],
            "commands": ["editor.action.marker.prev",],
        },

        // <leader>pv - Open/Close File explorer
        {
            "before"    : ["<leader>", "p", "v"],
            "commands"  : ["workbench.action.toggleSidebarVisibility",]
        },

        // <leader>pf - Reveal file in file explorer
        {
            "before"    : ["<leader>", "p", "f"],
            "commands"  : ["revealInExplorer",]
        },

        // <leader>l - Jump to window on the left
        {
            "before"    : ["<leader>", "l"],
            "after"     : ["ctrl+w", "l"]
        },

        // <leader>l - Jump to window on the right
        {
            "before"    : ["<leader>", "h"],
            "after"     : ["ctrl+w", "h"]
        },

        // <leader>gd - Goto Declaration
        {
            "before"    :["<leader>", "g", "d"],
            "commands"   : ["editor.action.revealDeclaration",]
        },

        // Bind <leader>cw to delete entire word under cursor without copying it to the copy register and enter insert mode
        {
            "before"    : ["<leader>", "c", "w"],
            "after"     : ["\"", "_", "c", "i", "w"]
        },

        // Bind <leader>cc to delete entire line under cursor without copying it to the copy register and enter insert mode
        {
            "before"    : ["<leader>", "c", "c"],
            "after"     : ["\"", "_", "c", "c"]
        },
        // Bind <leader>dw to delete entire word under cursor without copying it to the copy register

        {
            "before"    : ["<leader>", "d", "w"],
            "after"     : ["\"", "_", "d", "i", "w"]
        },

        // Bind <leader>dd to delete entire line under cursor without copying it to the copy register
        {
            "before"    : ["<leader>", "d", "d"],
            "after"     : ["\"", "_", "d", "d"]
        },

        // Bind <leader>dp to delete line without copying it to the copy register
        // and paste what is currently set in the copy register instead
        {
            "before"    : ["<leader>", "d", "p"],
            "after"     : ["<leader>", "d", "d", "P"]
        },

        // Bind <leader>- to copy the current line and paste a comment below it with dashes covering the width of the entire line
        {
            "before"    : ["<leader>", "-"],
            "after"     : ["y", "y", "p", "w", "v", "$", "r", "-"]
        },
        {
            "before"    : ["<leader>", "_"],
            "after"     : ["y", "y", "p", "w", "v", "$", "r", "-", "y", "y", "k", "P", "j"]
        },

        // Bind <leader>ad to add an empty comment line under the line under cursor and then
        // another comment line under it with an Add Description todo task
        {
            "before"    : ["<leader>", "a", "d"],
            "after"     : ["o"],
            "commands"  : [
                // {"command": "editor.action.insertLineAfter",},
                {"command": "editor.action.commentLine", },
                {"command": "editor.action.insertLineAfter"},
                {"command": "editor.action.commentLine", },
                {"command": "type", "args": {"text": "TODO: Add Description."} },
                {"command": "vim.remap", "args": {"after": ["<Esc>"]}},
            ],
        },

        // Bind <leader>f to add a function decleration header when cursor is on a function decl line
        {
            "before"    : ["<leader>", "f"],
            "after"     : [
                "^", "t", "(", "B", "y", "t", "(", "O", " ", "<BS>",
                "<Esc>", "p", "A", "(", ".", ".", ".", ")", "<Esc>", "I"
            ],
            "commands"  : [
                {"command": "type", "args": { "text": "Function: ", },},
                {"command": "editor.action.addCommentLine",},
                {"command": "vim.remap", "args": {"after": ["<Esc>", "<leader>", "a", "d"]}}
            ],
        },

        // Bind <leader>t to do the same as <leader>f but for task instead of function.
        {
            "before"    : ["<leader>", "t"],
            "after"     : [
                "^", "t", "(", "B", "y", "t", "(", "O", " ", "<BS>",
                "<Esc>", "p", "A", "(", ".", ".", ".", ")", "<Esc>", "I"
            ],
            "commands"  : [
                {"command": "type", "args": { "text": "Task: ", },},
                {"command": "editor.action.addCommentLine",},
                {"command": "vim.remap", "args": {"after": ["<Esc>", "<leader>", "a", "d"]}}
            ]
        },

        // Bind <leader>c to do the same as <leader>f but for class instead of function.
        {
            "before"    : ["<leader>", "c"],
            "after"     : [
                "^", "w", "y", "i", "w", "O", // Navigate cursor to class name
                "/", "/", "<space>", "C", "l", "a", "s", "s", ":", "<space>", "<Esc>", "p", 
                "<leader>", "a", "d"
            ]
        },

        // Bind <leader>v to do the same as <leader>f but for variable instead of function.
        {
            "before"    : ["<leader>", "v"],
            "after"     : [
                "^", "t", ";", "y", "i", "w", "O", // Navigate cursor to variable name
                "/", "/", "<space>", "V", "a", "r", "i", "a", "b", "l", "e", ":", "<space>", "<Esc>", "p", 
                "<leader>", "a", "d"
            ]
        },

        // Bind <leader>T to do the same as <leader>f but for Typedef instead of function.
        {
            "before"    : ["<leader>", "T"],
            "after"     : [
                "^", "t", ";", "y", "i", "w", "O", // Navigate cursor to type name
                "/", "/", "<space>", "T", "y", "p", "e", ":", "<space>", "<Esc>", "p", 
                "<leader>", "a", "d"
            ]
        },

        // Bind <leader>i to add a function implementation header when cursor is on a function decl line
        {
            "before"    : ["<leader>", "i"],
            "after"     : [
                "<Esc>", "^", "y", "y", "P", "I", "|", "<Esc>", "$", "F", ":", "d", "F", "<space>",
                "r", "<space>"
            ],
            "commands"  : [
                "editor.action.addCommentLine",
                {"command": "vim.remap", "args": {"after": ["<leader>", "-"]}},
            ]
        },

        // Bind <leader>uf to update the function name of the current function declaration header - cursor should be on the function decleration, not header.
        {
            "before"    : ["<leader>", "u", "f"],
            "after"     : [
                "^", "t", "(", "2", "B", "y", "t", "(", "{",
                "/", "F", "u", "n", "c", "t", "i", "o", "n", ":", "<CR>", "f", ":",
                "f", " ", "w", "\"", "_", "D", "p", "A", "(", ".", ".", ".", ")", "<Esc>"
            ]
        },

        // Bind <leader>ut to do the same as <leader>uf but for task
        {
            "before"    : ["<leader>", "u", "t"],
            "after"     : [
                "^", "t", "(", "2", "B", "y", "t", "(", "{",
                "/", "T", "a", "s", "k", ":", "<CR>", "f", ":",
                "f", " ", "\"", "_", "D", "p", "A", "(", ".", ".", ".", ")", "<Esc>"
            ]
        },

        // Bind <leader>uc to do the same as <leader>uf but for class
        {
            "before"    : ["<leader>", "u", "c"],
            "after"     : [
                "^", "w", "y", "i", "w", "2", "(", // Navigate cursor to class name
                "/", "C", "l", "a", "s", "s", ":", "<CR>", "f", ":", "w",
                "<leader>", "d", "w", "p"
            ]
        },

        // Bind <leader>uv to do the same as <leader>uf but for variable
        {
            "before"    : ["<leader>", "u", "v"],
            "after"     : [
                "^", "t", ";", "y", "i", "w", "2", "(",
                "/", "V", "a", "r", "i", "a", "b", "l", "e", ":", "<CR>", "f", ":", "w",
                "<leader>", "d", "w", "p"
            ]
        },

        // Bind <leader>uT to do the same as <leader>uf but for Type
        {
            "before"    : ["<leader>", "u", "T"],
            "after"     : [
                "^", "t", ";", "y", "i", "w", "2", "(",
                "/", "T", "y", "p", "e", ":", "<CR>", "f", ":", "w",
                "<leader>", "d", "w", "p"
            ]
        },

        // Bind <leader>ui to update the function name of the current function implementation header - cursor should be on the function decleration, not header.
        {
            "before"    : ["<leader>", "u", "i"],
            "after"     : [ "2", "k", "2", "<leader>", "d", "d", "<leader>", "i" ]
        }
    ]

}
